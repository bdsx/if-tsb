import { FileBufferReader } from "bdsx-util/writer/filereader";

const DOS_HEADER_SIZE = 0x40;
const PE_HEADER_SIZE = 0x18;

const PE_HEADER_BEGIN = 0x50;
const OPTIONAL_HEADER_BEGIN = PE_HEADER_BEGIN + PE_HEADER_SIZE;

const array = new Uint8Array([
    //////////////////////////
    // DOS Header
    0x4d, 0x5a,
    // MZ
    0x90, 0x00,
    // Bytes on last page of file
    0x03, 0x00,
    // Pages in file
    0x00, 0x00,
    // Relocations
    0x04, 0x00,
    // Size of header in paragraphs
    0x00, 0x00,
    // Minimum extra paragraphs needed
    0xff, 0xff,
    // Maximum extra paragraphs needed
    0x00, 0x00,
    // Initial (relative) SS value
    // 0x10 bytes

    0xb8, 0x00,
    // Initial SP value
    0x00, 0x00,
    // Checksum
    0x00, 0x00,
    // Initial IP value
    0x00, 0x00,
    // Initial (relative) CS value
    0x40, 0x00,
    // File address of relocation table
    0x00, 0x00,
    // Overlay number
    0x00, 0x00,
    // Reserved words 1
    0x00, 0x00,
    // Reserved words 2
    // 0x20 bytes

    0x00, 0x00,
    // Reserved words 3
    0x00, 0x00,
    // Reserved words 4
    0x00, 0x00,
    // OEM identifier (for e_oeminfo)
    0x00, 0x00,
    // OEM information; e_oemid specific
    0x00, 0x00,
    // Reserved words 1
    0x00, 0x00,
    // Reserved words 2
    0x00, 0x00,
    // Reserved words 3
    0x00, 0x00,
    // Reserved words 4
    // 0x30 bytes

    0x00, 0x00,
    // Reserved words 5
    0x00, 0x00,
    // Reserved words 6
    0x00, 0x00,
    // Reserved words 7
    0x00, 0x00,
    // Reserved words 8
    0x00, 0x00,
    // Reserved words 9
    0x00, 0x00,
    // Reserved words 10
    0x50, 0x00, 0x00, 0x00,
    // File address of new exe header
    // 0x40 bytes

    //////////////////////////
    // DOS Stub
    0x0e, 0x1f, 0xb8, 0x01, 0x4c, 0xcd, 0x21, 0x0d, 0x0d, 0x0d, 0x0a, 0x24,
    0x00, 0x00, 0x00, 0x00,
    // 0x50 bytes

    //////////////////////////
    // PE Header
    0x50, 0x45, 0x00, 0x00,
    // PE

    0x64, 0x86,
    // Machine: x64

    0x00, 0x00,
    // NumberOfSections: ??

    0x00, 0x00, 0x00, 0x00,
    // TimeDateStamp, Created Time: ??

    0x00, 0x00, 0x00, 0x00,
    // PointerToSymbolTable
    // 0x60 bytes

    0x00, 0x00, 0x00, 0x00,
    // NumberOfSymbols

    0xf0, 0x00,
    // SizeOfOptionalHeader

    0x00, 0x00,
    // Characteristics
    // 0x68 bytes

    //////////////////////////
    // Optional Header
    0x0b, 0x02,
    // Magic: PE32+

    0x00,
    // MajorLinkerVersion
    0x00,
    // MinorLinkerVersion

    0x00, 0x00, 0x00, 0x00,
    // SizeOfCode: ??
    // 0x70 bytes

    0x00, 0x00, 0x00, 0x00,
    // SizeOfInitializedData: ??

    0x00, 0x00, 0x00, 0x00,
    // SizeOfUninitializedData: 0

    0x00, 0x00, 0x00, 0x00,
    // AddressOfEntryPoint: ??

    0x00, 0x00, 0x00, 0x00,
    // BaseOfCode
    // 0x80 bytes

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // ImageBase

    0x00, 0x00, 0x00, 0x00,
    // SectionAlignment

    0x00, 0x00, 0x00, 0x00,
    // FileAlignment
    // 0x90 bytes

    0x06, 0x00,
    // MajorOperatingSystemVersion

    0x00, 0x00,
    // MinorOperatingSystemVersion

    0x00, 0x00,
    // MajorImageVersion

    0x00, 0x00,
    // MinorImageVersion

    0x06, 0x00,
    // MajorSubsystemVersion

    0x00, 0x00,
    // MinorSubsystemVersion

    0x00, 0x00, 0x00, 0x00,
    // Win32VersionValue
    // 0xA0 bytes

    0x00, 0x00, 0x00, 0x00,
    // SizeOfImage: ??

    0x00, 0x00, 0x00, 0x00,
    // SizeOfHeaders: ??

    0x00, 0x00, 0x00, 0x00,
    // CheckSum: ??

    0x03, 0x00,
    // Subsystem: IMAGE_SUBSYSTEM_WINDOWS_CUI

    0x00, 0x00,
    // DllCharacteristics
    // 0xB0 bytes

    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    // SizeOfStackReserve

    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // SizeOfStackCommit
    // 0xC0 bytes

    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    // SizeOfHeapReserve

    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // SizeOfHeapCommit
    // 0xD0 bytes

    0x00, 0x00, 0x00, 0x00,
    // LoaderFlags

    0x10, 0x00, 0x00, 0x00,
    // NumberOfRvaAndSizes: 16
    // 0xD8 bytes

    //////////////////////////
    // Data Directory { VirtualAddress, Size }
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Export Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Import Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Resource Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Exception Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Security Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Base Relocation Table
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Debug Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Architecture Specific Data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: RVA of GP
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: TLS Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Load Configuration Directory
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Bound Import Directory in headers
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Import Address Table
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: Delay Load Import Descriptors
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: COM Runtime descriptor
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Directory: ?
    // 0x158 bytes
]);

export class PEHeader {
    public static readonly SIZE = array.byteLength;

    public readonly buffer = array.slice();
    public readonly dos: DataView;
    public readonly pe: DataView;
    public readonly optional: DataView;
    public readonly imageDirectoryEntries: DataView;

    constructor() {
        const buffer = this.buffer.buffer;
        this.dos = new DataView(buffer);
        this.pe = new DataView(buffer, PE_HEADER_BEGIN, 0x18);
        this.optional = new DataView(buffer, OPTIONAL_HEADER_BEGIN);
        this.imageDirectoryEntries = new DataView(
            buffer,
            OPTIONAL_HEADER_BEGIN + 0x70
        );
    }

    async readFromFile(reader: FileBufferReader): Promise<void> {
        await reader.readTo(this.buffer, DOS_HEADER_SIZE);
        reader.p = this.dos.getInt32(0x3c, true); // peHeaderPos
        await reader.readTo(this.buffer, PE_HEADER_SIZE, PE_HEADER_BEGIN);
        const optionalSize = this.pe.getUint16(0x14, true); // optionalHeaderSize
        await reader.readTo(this.buffer, optionalSize, OPTIONAL_HEADER_BEGIN);
    }
}
